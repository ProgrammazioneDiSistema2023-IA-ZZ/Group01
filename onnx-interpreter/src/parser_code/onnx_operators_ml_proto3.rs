// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `onnx-operators-ml.proto3`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:onnx.OperatorProto)
pub struct OperatorProto {
    // message fields
    // @@protoc_insertion_point(field:onnx.OperatorProto.op_type)
    pub op_type: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.OperatorProto.since_version)
    pub since_version: i64,
    // @@protoc_insertion_point(field:onnx.OperatorProto.status)
    pub status: ::protobuf::EnumOrUnknown<super::onnx_ml_proto3::OperatorStatus>,
    // @@protoc_insertion_point(field:onnx.OperatorProto.doc_string)
    pub doc_string: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:onnx.OperatorProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OperatorProto {
    fn default() -> &'a OperatorProto {
        <OperatorProto as ::protobuf::Message>::default_instance()
    }
}

impl OperatorProto {
    pub fn new() -> OperatorProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for OperatorProto {
    const NAME: &'static str = "OperatorProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.op_type = is.read_string()?;
                },
                16 => {
                    self.since_version = is.read_int64()?;
                },
                24 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                82 => {
                    self.doc_string = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.op_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.op_type);
        }
        if self.since_version != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.since_version);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::onnx_ml_proto3::OperatorStatus::EXPERIMENTAL) {
            my_size += ::protobuf::rt::int32_size(3, self.status.value());
        }
        if !self.doc_string.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.doc_string);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.op_type.is_empty() {
            os.write_string(1, &self.op_type)?;
        }
        if self.since_version != 0 {
            os.write_int64(2, self.since_version)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::onnx_ml_proto3::OperatorStatus::EXPERIMENTAL) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if !self.doc_string.is_empty() {
            os.write_string(10, &self.doc_string)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OperatorProto {
        OperatorProto::new()
    }

    fn clear(&mut self) {
        self.op_type.clear();
        self.since_version = 0;
        self.status = ::protobuf::EnumOrUnknown::new(super::onnx_ml_proto3::OperatorStatus::EXPERIMENTAL);
        self.doc_string.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OperatorProto {
        static instance: OperatorProto = OperatorProto {
            op_type: ::std::string::String::new(),
            since_version: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            doc_string: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:onnx.OperatorSetProto)
pub struct OperatorSetProto {
    // message fields
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.magic)
    pub magic: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.ir_version)
    pub ir_version: i64,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.ir_version_prerelease)
    pub ir_version_prerelease: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.ir_build_metadata)
    pub ir_build_metadata: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.opset_version)
    pub opset_version: i64,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.doc_string)
    pub doc_string: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.operator)
    pub operator: ::std::vec::Vec<OperatorProto>,
    // @@protoc_insertion_point(field:onnx.OperatorSetProto.functions)
    pub functions: ::std::vec::Vec<super::onnx_ml_proto3::FunctionProto>,
    // special fields
    // @@protoc_insertion_point(special_field:onnx.OperatorSetProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OperatorSetProto {
    fn default() -> &'a OperatorSetProto {
        <OperatorSetProto as ::protobuf::Message>::default_instance()
    }
}

impl OperatorSetProto {
    pub fn new() -> OperatorSetProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for OperatorSetProto {
    const NAME: &'static str = "OperatorSetProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.magic = is.read_string()?;
                },
                16 => {
                    self.ir_version = is.read_int64()?;
                },
                26 => {
                    self.ir_version_prerelease = is.read_string()?;
                },
                58 => {
                    self.ir_build_metadata = is.read_string()?;
                },
                34 => {
                    self.domain = is.read_string()?;
                },
                40 => {
                    self.opset_version = is.read_int64()?;
                },
                50 => {
                    self.doc_string = is.read_string()?;
                },
                66 => {
                    self.operator.push(is.read_message()?);
                },
                74 => {
                    self.functions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.magic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.magic);
        }
        if self.ir_version != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.ir_version);
        }
        if !self.ir_version_prerelease.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ir_version_prerelease);
        }
        if !self.ir_build_metadata.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.ir_build_metadata);
        }
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.domain);
        }
        if self.opset_version != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.opset_version);
        }
        if !self.doc_string.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.doc_string);
        }
        for value in &self.operator {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.functions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.magic.is_empty() {
            os.write_string(1, &self.magic)?;
        }
        if self.ir_version != 0 {
            os.write_int64(2, self.ir_version)?;
        }
        if !self.ir_version_prerelease.is_empty() {
            os.write_string(3, &self.ir_version_prerelease)?;
        }
        if !self.ir_build_metadata.is_empty() {
            os.write_string(7, &self.ir_build_metadata)?;
        }
        if !self.domain.is_empty() {
            os.write_string(4, &self.domain)?;
        }
        if self.opset_version != 0 {
            os.write_int64(5, self.opset_version)?;
        }
        if !self.doc_string.is_empty() {
            os.write_string(6, &self.doc_string)?;
        }
        for v in &self.operator {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        };
        for v in &self.functions {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OperatorSetProto {
        OperatorSetProto::new()
    }

    fn clear(&mut self) {
        self.magic.clear();
        self.ir_version = 0;
        self.ir_version_prerelease.clear();
        self.ir_build_metadata.clear();
        self.domain.clear();
        self.opset_version = 0;
        self.doc_string.clear();
        self.operator.clear();
        self.functions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OperatorSetProto {
        static instance: OperatorSetProto = OperatorSetProto {
            magic: ::std::string::String::new(),
            ir_version: 0,
            ir_version_prerelease: ::std::string::String::new(),
            ir_build_metadata: ::std::string::String::new(),
            domain: ::std::string::String::new(),
            opset_version: 0,
            doc_string: ::std::string::String::new(),
            operator: ::std::vec::Vec::new(),
            functions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
