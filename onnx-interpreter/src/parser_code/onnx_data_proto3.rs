// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `onnx-data.proto3`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:onnx.SequenceProto)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SequenceProto {
    // message fields
    // @@protoc_insertion_point(field:onnx.SequenceProto.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.SequenceProto.elem_type)
    pub elem_type: i32,
    // @@protoc_insertion_point(field:onnx.SequenceProto.tensor_values)
    pub tensor_values: ::std::vec::Vec<super::onnx_ml_proto3::TensorProto>,
    // @@protoc_insertion_point(field:onnx.SequenceProto.sparse_tensor_values)
    pub sparse_tensor_values: ::std::vec::Vec<super::onnx_ml_proto3::SparseTensorProto>,
    // @@protoc_insertion_point(field:onnx.SequenceProto.sequence_values)
    pub sequence_values: ::std::vec::Vec<SequenceProto>,
    // @@protoc_insertion_point(field:onnx.SequenceProto.map_values)
    pub map_values: ::std::vec::Vec<MapProto>,
    // @@protoc_insertion_point(field:onnx.SequenceProto.optional_values)
    pub optional_values: ::std::vec::Vec<OptionalProto>,
    // special fields
    // @@protoc_insertion_point(special_field:onnx.SequenceProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SequenceProto {
    fn default() -> &'a SequenceProto {
        <SequenceProto as ::protobuf::Message>::default_instance()
    }
}

impl SequenceProto {
    pub fn new() -> SequenceProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SequenceProto {
    const NAME: &'static str = "SequenceProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.elem_type = is.read_int32()?;
                },
                26 => {
                    self.tensor_values.push(is.read_message()?);
                },
                34 => {
                    self.sparse_tensor_values.push(is.read_message()?);
                },
                42 => {
                    self.sequence_values.push(is.read_message()?);
                },
                50 => {
                    self.map_values.push(is.read_message()?);
                },
                58 => {
                    self.optional_values.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.elem_type != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.elem_type);
        }
        for value in &self.tensor_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.sparse_tensor_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.sequence_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.map_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.optional_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.elem_type != 0 {
            os.write_int32(2, self.elem_type)?;
        }
        for v in &self.tensor_values {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.sparse_tensor_values {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.sequence_values {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        for v in &self.map_values {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        for v in &self.optional_values {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SequenceProto {
        SequenceProto::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.elem_type = 0;
        self.tensor_values.clear();
        self.sparse_tensor_values.clear();
        self.sequence_values.clear();
        self.map_values.clear();
        self.optional_values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SequenceProto {
        static instance: SequenceProto = SequenceProto {
            name: ::std::string::String::new(),
            elem_type: 0,
            tensor_values: ::std::vec::Vec::new(),
            sparse_tensor_values: ::std::vec::Vec::new(),
            sequence_values: ::std::vec::Vec::new(),
            map_values: ::std::vec::Vec::new(),
            optional_values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `SequenceProto`
pub mod sequence_proto {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:onnx.SequenceProto.DataType)
    pub enum DataType {
        // @@protoc_insertion_point(enum_value:onnx.SequenceProto.DataType.UNDEFINED)
        UNDEFINED = 0,
        // @@protoc_insertion_point(enum_value:onnx.SequenceProto.DataType.TENSOR)
        TENSOR = 1,
        // @@protoc_insertion_point(enum_value:onnx.SequenceProto.DataType.SPARSE_TENSOR)
        SPARSE_TENSOR = 2,
        // @@protoc_insertion_point(enum_value:onnx.SequenceProto.DataType.SEQUENCE)
        SEQUENCE = 3,
        // @@protoc_insertion_point(enum_value:onnx.SequenceProto.DataType.MAP)
        MAP = 4,
        // @@protoc_insertion_point(enum_value:onnx.SequenceProto.DataType.OPTIONAL)
        OPTIONAL = 5,
    }

    impl ::protobuf::Enum for DataType {
        const NAME: &'static str = "DataType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<DataType> {
            match value {
                0 => ::std::option::Option::Some(DataType::UNDEFINED),
                1 => ::std::option::Option::Some(DataType::TENSOR),
                2 => ::std::option::Option::Some(DataType::SPARSE_TENSOR),
                3 => ::std::option::Option::Some(DataType::SEQUENCE),
                4 => ::std::option::Option::Some(DataType::MAP),
                5 => ::std::option::Option::Some(DataType::OPTIONAL),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<DataType> {
            match str {
                "UNDEFINED" => ::std::option::Option::Some(DataType::UNDEFINED),
                "TENSOR" => ::std::option::Option::Some(DataType::TENSOR),
                "SPARSE_TENSOR" => ::std::option::Option::Some(DataType::SPARSE_TENSOR),
                "SEQUENCE" => ::std::option::Option::Some(DataType::SEQUENCE),
                "MAP" => ::std::option::Option::Some(DataType::MAP),
                "OPTIONAL" => ::std::option::Option::Some(DataType::OPTIONAL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [DataType] = &[
            DataType::UNDEFINED,
            DataType::TENSOR,
            DataType::SPARSE_TENSOR,
            DataType::SEQUENCE,
            DataType::MAP,
            DataType::OPTIONAL,
        ];
    }

    impl ::std::default::Default for DataType {
        fn default() -> Self {
            DataType::UNDEFINED
        }
    }

}

// @@protoc_insertion_point(message:onnx.MapProto)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MapProto {
    // message fields
    // @@protoc_insertion_point(field:onnx.MapProto.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.MapProto.key_type)
    pub key_type: i32,
    // @@protoc_insertion_point(field:onnx.MapProto.keys)
    pub keys: ::std::vec::Vec<i64>,
    // @@protoc_insertion_point(field:onnx.MapProto.string_keys)
    pub string_keys: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:onnx.MapProto.values)
    pub values: ::protobuf::MessageField<SequenceProto>,
    // special fields
    // @@protoc_insertion_point(special_field:onnx.MapProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MapProto {
    fn default() -> &'a MapProto {
        <MapProto as ::protobuf::Message>::default_instance()
    }
}

impl MapProto {
    pub fn new() -> MapProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MapProto {
    const NAME: &'static str = "MapProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.key_type = is.read_int32()?;
                },
                26 => {
                    is.read_repeated_packed_int64_into(&mut self.keys)?;
                },
                24 => {
                    self.keys.push(is.read_int64()?);
                },
                34 => {
                    self.string_keys.push(is.read_bytes()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.values)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.key_type != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.key_type);
        }
        for value in &self.keys {
            my_size += ::protobuf::rt::int64_size(3, *value);
        };
        for value in &self.string_keys {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        if let Some(v) = self.values.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.key_type != 0 {
            os.write_int32(2, self.key_type)?;
        }
        for v in &self.keys {
            os.write_int64(3, *v)?;
        };
        for v in &self.string_keys {
            os.write_bytes(4, &v)?;
        };
        if let Some(v) = self.values.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MapProto {
        MapProto::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.key_type = 0;
        self.keys.clear();
        self.string_keys.clear();
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MapProto {
        static instance: MapProto = MapProto {
            name: ::std::string::String::new(),
            key_type: 0,
            keys: ::std::vec::Vec::new(),
            string_keys: ::std::vec::Vec::new(),
            values: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:onnx.OptionalProto)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct OptionalProto {
    // message fields
    // @@protoc_insertion_point(field:onnx.OptionalProto.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:onnx.OptionalProto.elem_type)
    pub elem_type: i32,
    // @@protoc_insertion_point(field:onnx.OptionalProto.tensor_value)
    pub tensor_value: ::protobuf::MessageField<super::onnx_ml_proto3::TensorProto>,
    // @@protoc_insertion_point(field:onnx.OptionalProto.sparse_tensor_value)
    pub sparse_tensor_value: ::protobuf::MessageField<super::onnx_ml_proto3::SparseTensorProto>,
    // @@protoc_insertion_point(field:onnx.OptionalProto.sequence_value)
    pub sequence_value: ::protobuf::MessageField<SequenceProto>,
    // @@protoc_insertion_point(field:onnx.OptionalProto.map_value)
    pub map_value: ::protobuf::MessageField<MapProto>,
    // @@protoc_insertion_point(field:onnx.OptionalProto.optional_value)
    pub optional_value: ::protobuf::MessageField<OptionalProto>,
    // special fields
    // @@protoc_insertion_point(special_field:onnx.OptionalProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OptionalProto {
    fn default() -> &'a OptionalProto {
        <OptionalProto as ::protobuf::Message>::default_instance()
    }
}

impl OptionalProto {
    pub fn new() -> OptionalProto {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for OptionalProto {
    const NAME: &'static str = "OptionalProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                16 => {
                    self.elem_type = is.read_int32()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.tensor_value)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sparse_tensor_value)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sequence_value)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.map_value)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.optional_value)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.elem_type != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.elem_type);
        }
        if let Some(v) = self.tensor_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sparse_tensor_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sequence_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.map_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.optional_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.elem_type != 0 {
            os.write_int32(2, self.elem_type)?;
        }
        if let Some(v) = self.tensor_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.sparse_tensor_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.sequence_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.map_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.optional_value.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OptionalProto {
        OptionalProto::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.elem_type = 0;
        self.tensor_value.clear();
        self.sparse_tensor_value.clear();
        self.sequence_value.clear();
        self.map_value.clear();
        self.optional_value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OptionalProto {
        static instance: OptionalProto = OptionalProto {
            name: ::std::string::String::new(),
            elem_type: 0,
            tensor_value: ::protobuf::MessageField::none(),
            sparse_tensor_value: ::protobuf::MessageField::none(),
            sequence_value: ::protobuf::MessageField::none(),
            map_value: ::protobuf::MessageField::none(),
            optional_value: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `OptionalProto`
pub mod optional_proto {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:onnx.OptionalProto.DataType)
    pub enum DataType {
        // @@protoc_insertion_point(enum_value:onnx.OptionalProto.DataType.UNDEFINED)
        UNDEFINED = 0,
        // @@protoc_insertion_point(enum_value:onnx.OptionalProto.DataType.TENSOR)
        TENSOR = 1,
        // @@protoc_insertion_point(enum_value:onnx.OptionalProto.DataType.SPARSE_TENSOR)
        SPARSE_TENSOR = 2,
        // @@protoc_insertion_point(enum_value:onnx.OptionalProto.DataType.SEQUENCE)
        SEQUENCE = 3,
        // @@protoc_insertion_point(enum_value:onnx.OptionalProto.DataType.MAP)
        MAP = 4,
        // @@protoc_insertion_point(enum_value:onnx.OptionalProto.DataType.OPTIONAL)
        OPTIONAL = 5,
    }

    impl ::protobuf::Enum for DataType {
        const NAME: &'static str = "DataType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<DataType> {
            match value {
                0 => ::std::option::Option::Some(DataType::UNDEFINED),
                1 => ::std::option::Option::Some(DataType::TENSOR),
                2 => ::std::option::Option::Some(DataType::SPARSE_TENSOR),
                3 => ::std::option::Option::Some(DataType::SEQUENCE),
                4 => ::std::option::Option::Some(DataType::MAP),
                5 => ::std::option::Option::Some(DataType::OPTIONAL),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<DataType> {
            match str {
                "UNDEFINED" => ::std::option::Option::Some(DataType::UNDEFINED),
                "TENSOR" => ::std::option::Option::Some(DataType::TENSOR),
                "SPARSE_TENSOR" => ::std::option::Option::Some(DataType::SPARSE_TENSOR),
                "SEQUENCE" => ::std::option::Option::Some(DataType::SEQUENCE),
                "MAP" => ::std::option::Option::Some(DataType::MAP),
                "OPTIONAL" => ::std::option::Option::Some(DataType::OPTIONAL),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [DataType] = &[
            DataType::UNDEFINED,
            DataType::TENSOR,
            DataType::SPARSE_TENSOR,
            DataType::SEQUENCE,
            DataType::MAP,
            DataType::OPTIONAL,
        ];
    }

    impl ::std::default::Default for DataType {
        fn default() -> Self {
            DataType::UNDEFINED
        }
    }

}
